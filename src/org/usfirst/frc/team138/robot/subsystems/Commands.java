// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team138.robot.subsystems;

import org.usfirst.frc.team138.robot.RobotMap;
import org.usfirst.frc.team138.robot.commands.*;

import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANJaguar;


import edu.wpi.first.wpilibj.Jaguar;
import edu.wpi.first.wpilibj.PWM;
import edu.wpi.first.wpilibj.command.Subsystem;

import org.usfirst.frc.team138.robot.subsystems.*;

/**
 *
 */
public class Commands extends Subsystem {
   
    public void initDefaultCommand() {
    }
    
   public boolean liftPositionAquire(Lift lift, Claw claw, ArmExtension arm, Wrist wrist, AnalogInput rangeFinder)
   {
	   lift.up(); //this is really down
	   if(!(rangeFinder.getVoltage() > .075)) 
	   {
		   lift.stop();
		   return true;
	   }
	   else
	   {
		   return false;
	   }
   }
   
   public boolean liftPositionTransport(Lift lift, Claw claw, ArmExtension arm, Wrist wrist, AnalogInput rangeFinder)
   {
	   if(rangeFinder.getVoltage() < .257)
	   {
		   lift.down();
		   return true;
	   }
	   else if(rangeFinder.getVoltage() > .277)
	   {
		   lift.up();
		   return true;
	   }
	   else
	   {
		   lift.stop();
		   return false;
	   }
   }
   
   public boolean liftPositionMax(Lift lift, Claw claw, ArmExtension arm, Wrist wrist, AnalogInput rangeFinder)
   {
	   lift.down(); //this is really up
	   if(!(rangeFinder.getVoltage() < .452)) 
	   {
		   lift.stop();
		   return true;
	   }
	   else
	   {
		   return false;
	   }
   }
   
   public void armExtensionOut(Lift lift, Claw claw, ArmExtension arm, Wrist wrist, AnalogInput rangeFinder)
   {
	   arm.out();
   }
   
   public void armExtensionIn(Lift lift, Claw claw, ArmExtension arm, Wrist wrist, AnalogInput rangeFinder)
   {
	   arm.in();
   }
   
   public void acquireContainer(Lift lift, Claw claw, ArmExtension arm, Wrist wrist, AnalogInput rangeFinder)
   {
	   liftPositionAquire(lift, claw, arm, wrist, rangeFinder);
	   claw.close();
	   liftPositionTransport(lift, claw, arm, wrist, rangeFinder);
	   armExtensionIn(lift, claw, arm, wrist, rangeFinder);
	   wrist.up();
   }
   
   public void placeContainer(Lift lift, Claw claw, ArmExtension arm, Wrist wrist, AnalogInput rangeFinder, int part)
   {
	   if(part == 0)
	   {
		   claw.open();
	   }
	   else if(part == 1)
	   {
		   armExtensionIn(lift, claw, arm, wrist, rangeFinder);
		   defaultState(lift, claw, arm, wrist, rangeFinder);
	   }
	   
   }
   
   public void acquireTote(Lift lift, Claw claw, ArmExtension arm, Wrist wrist, AnalogInput rangeFinder)
   {
	   liftPositionAquire(lift, claw, arm, wrist, rangeFinder);
	   claw.close();
	   liftPositionTransport(lift, claw, arm, wrist, rangeFinder);
	   armExtensionIn(lift, claw, arm, wrist, rangeFinder);
   }
   
   public void placeTote(Lift lift, Claw claw, ArmExtension arm, Wrist wrist, AnalogInput rangeFinder)
   {
	   claw.open();
	   armExtensionIn(lift, claw, arm, wrist, rangeFinder);
	   defaultState(lift, claw, arm, wrist, rangeFinder);
   }
   
   public void leftMantis()
   {
	   
   }
   
   public void rightMantis()
   {
	   
   }
   
   public void defaultState(Lift lift, Claw claw, ArmExtension arm, Wrist wrist, AnalogInput rangeFinder)
   {
	   wrist.down();
	   claw.close();
	   liftPositionAquire(lift, claw, arm, wrist, rangeFinder);
	   armExtensionIn(lift, claw, arm, wrist, rangeFinder);
   }
   
    
}

